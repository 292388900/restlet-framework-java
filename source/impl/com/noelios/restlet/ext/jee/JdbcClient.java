/*
 * Copyright © 2005 Jérôme LOUVEL.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package com.noelios.restlet.ext.jee;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.dbcp.PoolingDataSource;
import org.apache.commons.pool.ObjectPool;
import org.apache.commons.pool.impl.GenericObjectPool;
import org.restlet.RestletException;
import org.restlet.UniformCall;
import org.restlet.connector.AbstractConnector;
import org.restlet.connector.Client;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import com.noelios.restlet.data.ObjectRepresentation;

/**
 * A client to a database server.
 * To send a request to the server, specify a JDBC URI as the resource path of the call and
 * use a SQL request as the content of the call.
 * Database connections are pooled using Apache Commons DBCP.
 */
public class JdbcClient extends AbstractConnector implements Client
{
   /** The JDBC data source. */
   private DataSource dataSource;

   /**
    * Constructor.
    * @param name 			The connector unique name.
    * @param jdbcURI 		The database's JDBC URI.
    * @param driverClass	The JDBC driver class.
    */
   public JdbcClient(String name, String jdbcURI, String driverClass) throws RestletException
   {
      super(name);

      // Load the JDBC driver
      try
      {
         Class.forName(driverClass);
      }
      catch (ClassNotFoundException e)
      {
         throw new RestletException("Couldn't load the JDBC driver. Please, check the classpath.", e);
      }

      // Set up the PoolingDataSource
      this.dataSource = createDataSource(jdbcURI);
   }

   /**
    * Handles a REST call.
    * @param call The call to handle.
    */
   public void handle(UniformCall call)
   {
      Connection connection = null;

      try
      {
         // Parse the JDBC URI
         // String jdbcURI = call.getRelativeResourcePath();

         // Parse the request to extract necessary info
         DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
         Document request = docBuilder.parse(call.getInput().getStream());

         Element root = (Element)request.getElementsByTagName("request").item(0);
         Element header = (Element)root.getElementsByTagName("header").item(0);

         Node autoGeneratedKeysNode = header.getElementsByTagName("autoGeneratedKeys").item(0);
         boolean autoGeneratedKeys = autoGeneratedKeysNode.getTextContent().equals("true") ? true : false;

         Node sqlRequestNode = root.getElementsByTagName("body").item(0);
         String sqlRequest = sqlRequestNode.getTextContent();

         connection = getDataSource().getConnection();
         Statement statement = connection.createStatement();
         statement.execute(sqlRequest, autoGeneratedKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS);
         JdbcResult result = new JdbcResult(statement);

         call.setOutput(new ObjectRepresentation(result));
      }
      catch (Exception e)
      {
         // LOG ERROR throw new RestletException("An error occured while trying to send a database request", e);
      }
      finally
      {
         try
         {
            if (connection != null) connection.close();
         }
         catch (SQLException se)
         {
            // LOG ERROR throw new RestletException("An error occured while trying to close a database connection", se);
         }
      }
   }

   /**
    * Create the JDBC data source.
    * @param connectURI The connection URI.
    * @return 				The JDBC data source.
    */
   private DataSource createDataSource(String connectURI)
   {
      // Create an ObjectPool that will serve as the actual pool of connections
      ObjectPool connectionPool = new GenericObjectPool(null);

      // Create a ConnectionFactory that the pool will use to create Connections.
      // ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(connectURI, null);

      // Create the PoolableConnectionFactory, which wraps the "real" Connections created by the ConnectionFactory with
      // the classes that implement the pooling functionality.
      // PoolableConnectionFactory poolableConnectionFactory =
      //    new PoolableConnectionFactory(connectionFactory, connectionPool, null, null, false, true);

      // Create the PoolingDataSource itself, passing in the object pool we created.
      return new PoolingDataSource(connectionPool);
   }

   /**
    * Returns the JDBC data source.
    * @return The JDBC data source.
    */
   private DataSource getDataSource()
   {
      return this.dataSource;
   }

   /**
    * Escapes quotes in a SQL query.
    * @param query The SQL query to escape.
    */
   public static String escapeQuotes(String query)
   {
      StringBuilder result = new StringBuilder(query.length() + 10);
      char currentChar;

      for (int i = 0; i < query.length(); i++)
      {
         currentChar = query.charAt(i);
         if (currentChar == '\'')
         {
            result.append("''");
         }
         else
         {
            result.append(currentChar);
         }
      }

      return result.toString();
   }

}



