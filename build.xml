<?xml version="1.0"?>

<!-- =======================================================
     Restlet build file  -  Copyright (c) 2005 Jerome LOUVEL
     ======================================================= -->

<project name="Restlet" default="dist" basedir=".">
    
  <!-- Set global paths -->
  <property name="api"      location="api"/>
  <property name="classes"  location="classes"/>
  <property name="dist"     location="dist"/>
  <property name="docs"     location="docs"/>
  <property name="lib"      location="lib"/>
  <property name="src"      location="source/impl"/>
  <property name="archives" location="e:/projets"/>
  
  <path id="main.path">
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  

  <!-- Set global names -->
  <property name="version.full"     value="0.10 beta"/>
  <property name="version.compact"  value="0.10b"/>
  <property name="restlet.api"      value="Restlet API"/>
  <property name="restlet.ri"       value="Noelios Restlet Engine"/>
  <property name="author"           value="Jerome Louvel"/>


  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>


  <target name="compile" depends="init" description="Compile the source" >
    <!-- Create the directory used by compiler -->
    <mkdir dir="${classes}"/>
    
    <!-- Compiles source files -->
    <javac srcdir="${src}"  destdir="${classes}" classpathref="main.path"/>
  </target>


  <target name="dist" depends="test" description="Generate the distribution" >
    <delete dir="${dist}/${DSTAMP}" verbose="false" quiet="true" includeEmptyDirs="true"/>
    <mkdir dir="${dist}/${DSTAMP}/lib"/>
    <mkdir dir="${dist}/${DSTAMP}/src"/>

    <!-- Create Restlet API jar file -->
    <jar jarfile="${dist}/${DSTAMP}/lib/org.restlet.jar" basedir="${classes}" includes="org/restlet/**">
      <manifest>
        <attribute name="Built-By" value="${author}"/>
        <section name="org.restlet">
          <attribute name="Specification-Title" value="${restlet.api}"/>
          <attribute name="Specification-Version" value="${version.full}"/>
          <attribute name="Specification-Vendor" value="${author}"/>
        </section>
      </manifest>
    </jar>
    
    <!-- Create Noelios Restlet Server jar file -->
    <jar jarfile="${dist}/${DSTAMP}/lib/com.noelios.restlet.jar" basedir="${classes}" includes="com/noelios/restlet/**" excludes="com/noelios/restlet/test/**">
      <manifest>
        <attribute name="Built-By" value="${author}"/>
        <section name="com.noelios.restlet">
          <attribute name="Implementation-Title" value="${restlet.ri}"/>
          <attribute name="Implementation-Version" value="${version.full} ${TODAY}"/> 
          <attribute name="Implementation-Vendor" value="${author}"/>
        </section>
      </manifest>
    </jar>

    <!-- Create Restlet API source jar file -->
    <jar jarfile="${dist}/${DSTAMP}/src/org.restlet.jar" basedir="${src}" includes="org/restlet/**" excludes="**/.emptyDir **/package.html">
      <manifest>
        <attribute name="Built-By" value="${author}"/>
        <section name="org.restlet">
          <attribute name="Specification-Title" value="${restlet.api}"/>
          <attribute name="Specification-Version" value="${version.full}"/>
          <attribute name="Specification-Vendor" value="${author}"/>
        </section>
      </manifest>
    </jar>
    
    <!-- Create Noelios Restlet Server source jar file -->
    <jar jarfile="${dist}/${DSTAMP}/src/com.noelios.restlet.jar" basedir="${src}" includes="com/noelios/restlet/**" excludes="com/noelios/restlet/test/** **/.emptyDir **/package.html">
      <manifest>
        <attribute name="Built-By" value="${author}"/>
        <section name="com.noelios.restlet">
          <attribute name="Implementation-Title" value="${restlet.ri}"/>
          <attribute name="Implementation-Version" value="${version.full} ${TODAY}"/> 
          <attribute name="Implementation-Vendor" value="${author}"/>
        </section>
      </manifest>
    </jar>

    <!-- Copy tha Javadocs -->    
    <copy todir="${dist}/${DSTAMP}/api">
      <fileset dir="${api}"/>
    </copy>    

    <!-- Copy the release notes -->    
    <copy file="${docs}/release_notes.htm" todir="${dist}/${DSTAMP}"/>

    <!-- Copy the changes log -->    
    <copy file="${docs}/changes_log.htm" todir="${dist}/${DSTAMP}"/>

    <!-- Copy text notes -->    
    <copy file="copyright.txt"  todir="${dist}/${DSTAMP}"/>
    <copy file="license.txt"    todir="${dist}/${DSTAMP}"/>
    <copy file="readme.txt"     todir="${dist}/${DSTAMP}"/>
    <copy file="trademarks.txt" todir="${dist}/${DSTAMP}"/>

    <!-- Copy the FreeMarker library -->    
    <copy file="${lib}/org.freemarker.jar" todir="${dist}/${DSTAMP}/lib/ext"/>

    <!-- Copy the Jetty libraries -->    
    <copy file="${lib}/org.mortbay.jetty.jar" todir="${dist}/${DSTAMP}/lib/ext"/>
    <copy file="${lib}/javax.servlet.jar" todir="${dist}/${DSTAMP}/lib/ext"/>

    <!-- Copy the JDBC client libraries -->    
    <copy file="${lib}/org.apache.commons.dbcp.jar" todir="${dist}/${DSTAMP}/lib/ext"/>
    <copy file="${lib}/org.apache.commons.logging.jar" todir="${dist}/${DSTAMP}/lib/ext"/>
    <copy file="${lib}/org.apache.commons.pool.jar" todir="${dist}/${DSTAMP}/lib/ext"/>

    <!-- Copy the Java Mail client libraries -->    
    <copy file="${lib}/javax.mail.jar" todir="${dist}/${DSTAMP}/lib/ext"/>
    
    <!-- Create the final zip file -->
    <zip destfile="${dist}/restlet-${version.compact}.zip" basedir="${dist}/${DSTAMP}" includes="**/*"/>

    <!-- Remove the temporary files -->
    <delete dir="${dist}/${DSTAMP}" verbose="false" quiet="true" includeEmptyDirs="true"/>
   
  </target>

  
  <target name="api" depends="init" description="Generate the Javadocs" >
    <delete dir="${api}" verbose="false" quiet="true" includeEmptyDirs="true"/>
    
    <javadoc packagenames="org.restlet.*,com.noelios.restlet.*"
           sourcepath="${src}"
           destdir="${api}"
           classpathref="main.path"
           author="true"
           version="true"
           use="true"
           windowtitle="Restlet ${version.full}"
           doctitle="Restlet ${version.full}"
           overview="${src}/overview.html"
           verbose="false"
           excludepackagenames="com.noelios.restlet.test">
      
      <bottom><![CDATA[<i>Copyright &#169; 2005 J&eacute;r&ocirc;me Louvel. All Rights Reserved.</i>]]></bottom>
      
      <tag name="associates"          scope="all" description="Design stereotype: " enabled="false"/>
      <tag name="clientCardinality"   scope="all" description="Design stereotype: " enabled="false"/>
      <tag name="label"               scope="all" description="Design stereotype: " enabled="false"/>
      <tag name="stereotype"          scope="all" description="Design stereotype: " enabled="false"/>
      <tag name="supplierCardinality" scope="all" description="Design stereotype: " enabled="false"/>
      
      <group title="${restlet.api}"><package name="org.restlet*" /></group>
      <group title="${restlet.ri}" ><package name="com.noelios.restlet*" /></group>
      
      <link href="http://freemarker.org/docs/api/"/>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
      <link href="http://java.sun.com/products/javamail/javadocs/"/>
      <link href="http://jetty.mortbay.org/javadoc/"/>
    </javadoc>    
    
  </target>


  <target name="test" depends="init" description="Unit testing">
    <junit printsummary="yes" fork="yes" haltonfailure="yes" filtertrace="yes" showoutput="yes">
      <classpath>
        <pathelement location="${classes}"/>
      </classpath>
  
      <formatter type="plain"/>
      <test name="com.noelios.restlet.test.RestletTestSuite" todir="${classes}" />
    </junit>
  </target>


  <target name="clean" description="Clean up" >
    <!-- Delete the ${classes} and ${api} directory trees -->
    <delete dir="${classes}"/>
    <delete dir="${api}"/>
  </target>


  <target name="clean-dist" description="Clean up distributions" >
    <!-- Delete the distribution directory -->
    <delete dir="${dist}"/>
  </target>


  <target name="archive" depends="init" description="Daily archive" >
    <!-- Create the final zip file -->
    <zip destfile="${archives}/Restlet ${DSTAMP}.zip" basedir="" includes="**/*" excludes="api/** classes/**"/>
  </target>

</project>
