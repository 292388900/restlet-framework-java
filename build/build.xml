<?xml version="1.0"?>

<!-- =========================================================
     Restlet build script - Copyright 2005-2012 Restlet S.A.S.
     ========================================================= -->

<project name="Restlet" default="rebuild">
	<!-- ============================ -->
	<!-- ===  Properties setting  === -->
	<!-- ============================ -->

	<!-- Load system specific properties -->
	<property file="custom.properties" />

	<!-- Load default properties -->
	<property file="build.properties" />

	<!-- General properties -->

	<!-- Increment the build number -->
	<buildnumber />

	<!-- Current year -->
	<tstamp>
		<format property="current-year" pattern="yyyy" />
	</tstamp>

	<!-- Maven time stamp -->
	<tstamp>
		<format property="maven-snapshot-timestamp" pattern="yyyyMMdd.HHmmss" />
	</tstamp>

	<tstamp>
		<format property="build.date" pattern="yyyyMMdd-HHmm" />
	</tstamp>

	<!-- Location properties -->
	<property name="tools" location="tools" />
	<property name="dist" location="dist" />
	<property name="temp" location="temp" />
	<property name="tmpl" location="tmpl" />
	<property name="editions-dir" location="editions" />
	<property name="modules" location="../modules" />
	<property name="libs" location="../libraries" />
	<property name="parent-maven-groupId" value="org.restlet" />
	<property name="parent-maven-artifactId" value="org.restlet.parent" />
	<property name="parent-maven-version" value="${version-maven}" />
	<property name="eclipse-version-suffix" value="v${build.date}" />
	<property name="eclipse-version-full" value="${version-manifest-prefix}${eclipse-version-suffix}" />

	<!-- Set the property that will enable the generation of miscellaneous files -->
	<condition property="do-miscgeneration">
		<istrue value="${miscgeneration}" />
	</condition>

	<!-- ======================= -->
	<!-- ===  Paths setting  === -->
	<!-- ======================= -->
	<path id="forge-path">
		<fileset dir="${tools}/forge" includes="**/*.jar" />
	</path>
	<path id="fmpp-path">
		<fileset dir="${tools}/fmpp" includes="**/*.jar" />
	</path>
	<path id="bnd-path">
		<fileset dir="${tools}/bnd" includes="**/*.jar" />
	</path>

	<!-- =================== -->
	<!-- ===  Ant Tasks  === -->
	<!-- =================== -->

	<!-- Ant Contrib -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<fileset dir="${tools}/ant-contrib" includes="**/*.jar" />
		</classpath>
	</taskdef>

	<!-- FMPP (FreeMarker-based text file PreProcessor) -->
	<taskdef name="fmpp" classname="fmpp.tools.AntTask">
		<classpath>
			<path refid="fmpp-path" />
			<path refid="forge-path" />
		</classpath>
	</taskdef>

	<!-- BND (handling of OSGI bundles) -->
	<taskdef resource="aQute/bnd/ant/taskdef.properties" classpathref="bnd-path" />

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: generate-edition          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="generate-edition" description="Generate the source code for a target edition.">
		<attribute name="edition" />
		<sequential>
			<mkdir dir="${editions-dir}/@{edition}" />
			<!-- Generate the properties files -->
			<fmpp sourceroot="${tmpl}/editions" outputroot="${editions-dir}/@{edition}" dataroot="${basedir}" includes="*.properties">
				<data expandproperties="true">
					values: dataLoader.ForgeLoader("project.xml", "../modules", "../libraries")
					project: get(values, "project")
					editions: get(values, "editions")
    				editionKey: @{edition}
    				edition: get(editions, @{edition})
					currentYear: ${current-year}
    			</data>
			</fmpp>
			<!-- Generate the dependencies.txt file -->
			<fmpp sourceroot="${tmpl}/text" outputroot="${editions-dir}/@{edition}" dataroot="${basedir}" includes="dependencies.txt">
				<data expandproperties="true">
					values: dataLoader.ForgeLoader("project.xml", "../modules", "../libraries")
					project: get(values, "project")
					editions: get(values, "editions")
					editionKey: @{edition}
    				edition: get(editions, @{edition})
					currentYear: ${current-year}
    			</data>
			</fmpp>
			<!-- Generate the POM files. -->
			<echo message="Generate the POM files" />
			<fmpp sourceroot="${tmpl}/editions" outputroot="${editions-dir}/@{edition}/poms" dataroot="${basedir}" includes="*pom.tmpl">
				<data expandproperties="true">
					values: dataLoader.ForgeLoader("project.xml", "../modules", "../libraries")
					project: get(values, "project")
					editions: get(values, "editions")
					editionKey: @{edition}
    				edition: get(editions, @{edition})
					currentYear: ${current-year}
					ant: antProperties()
    			</data>
			</fmpp>
			<!-- Generate the feature.xml file -->
			<echo message="Generate the feature.xml file" />
			<fmpp sourceroot="${tmpl}/eclipse" outputroot="${editions-dir}/@{edition}" dataroot="${basedir}" includes="feature.xml">
				<data expandproperties="true">
						values: dataLoader.ForgeLoader("project.xml", "../modules", "../libraries")
						project: get(values, "project")
						editions: get(values, "editions")
						editionKey: @{edition}
	    				edition: get(editions, @{edition})
						currentYear: ${current-year}
						ant: antProperties()
	    			</data>
			</fmpp>

			<move file="${editions-dir}/@{edition}/poms/org.restlet.parent.pom.tmpl" tofile="${editions-dir}/@{edition}/poms/org.restlet.parent.pom" />
			<!-- Process the build.xml file. -->
			<loadfile property="paths" srcFile="${tmpl}/editions/paths.tmpl" />
			<loadfile property="generate-sources" srcFile="${tmpl}/editions/generate-sources.tmpl" />
			<loadfile property="generate-javadocs" srcFile="${tmpl}/editions/javadocs.tmpl" />
			<loadfile property="stage-modules" srcFile="${tmpl}/editions/stage-modules.tmpl" />
			<loadfile property="stage-extras" srcFile="${tmpl}/editions/stage-extras.tmpl" />
			<loadfile property="generate-classes-extras" srcFile="${tmpl}/editions/generate-classes-extras.tmpl" />
			<!-- Pre-process the build file since ant and freemarker shares the same syntax. -->
			<copy file="${tmpl}/editions/build.xml" tofile="${editions-dir}/@{edition}/build.tmpl" overwrite="true">
				<filterchain>
					<replaceregex pattern="\$\{" replace="*DOLLAR*{" flags="g" />
					<replacestring from="@edition@" to="Edition for ${edition.mediumLabel}" />
					<!-- nb: ant tokens can't contain "<" characters -->
					<replacestring from="@paths@" to="${paths}" />
					<replacestring from="@generate-sources@" to="${generate-sources}" />
					<replacestring from="@generate-javadocs@" to="${generate-javadocs}" />
					<replacestring from="@stage-modules@" to="${stage-modules}" />
					<replacestring from="@stage-extras@" to="${stage-extras}" />
					<replacestring from="@generate-classes-extras@" to="${generate-classes-extras}" />
				</filterchain>
			</copy>
			<!-- Process it as a Freemarker template. -->
			<fmpp sourcefile="${editions-dir}/@{edition}/build.tmpl" outputfile="${editions-dir}/@{edition}/build.xml" dataroot="${basedir}" expert="true">
				<data expandproperties="true">
					values: dataLoader.ForgeLoader("project.xml", "../modules", "../libraries")
					project: get(values, "project")
					editions: get(values, "editions")
    				editionKey: @{edition}
    				edition: get(editions, @{edition})
					currentYear: ${current-year}
    			</data>
			</fmpp>
			<delete file="${editions-dir}/@{edition}/build.tmpl" />
			<!-- Post-process the build file since ant and freemarker share the same syntax. -->
			<replace file="${editions-dir}/@{edition}/build.xml" token="*DOLLAR*" value="$" />

			<if>
				<equals arg1="${edition}" arg2="osgi" />
				<then>
					<!-- Generate the P2 feature files. -->
					<echo message="Generate the P2 feature files" />
					<fmpp sourceroot="${tmpl}/eclipse" outputroot="${editions-dir}/@{edition}/p2" dataroot="${basedir}">
						<data expandproperties="true">
							values: dataLoader.ForgeLoader("project.xml", "../modules", "../libraries")
							project: get(values, "project")
							editions: get(values, "editions")
							editionKey: @{edition}
		    				edition: get(editions, @{edition})
							currentYear: ${current-year}
							ant: antProperties()
		    			</data>
						<include name="feature.tmpl" />
					</fmpp>
				</then>
			</if>

			<copy file="build.properties" todir="${editions-dir}/@{edition}" overwrite="true" />
			<copy file="custom.properties" todir="${editions-dir}/@{edition}" overwrite="true" failonerror="false" />
			<ant antfile="build.xml" target="generate-sources" dir="${editions-dir}/@{edition}/" inheritall="false" />
		</sequential>
	</macrodef>


	<!-- = = = = = = = = = = = = = = = = =
          macrodef: exec-edition          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="exec-edition" description="Executes a task for a target edition">
		<attribute name="edition" />
		<attribute name="target" default="build" />
		<sequential>
			<for param="task" delimiter=" " list="@{target}">
				<sequential>
					<ant antfile="build.xml" target="@{task}" dir="${editions-dir}/@{edition}/" inheritall="false">
						<property name="build.number" value="${build.number}" />
						<property name="eclipse-version-full" value="${eclipse-version-full}" />
					</ant>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          Definition of targets          
         = = = = = = = = = = = = = = = = = -->
	<target name="generate-misc" if="do-miscgeneration" description="Generates miscellaneous files.">
		<delete dir="${temp}/misc" />
		<!-- Generate editions matrix file -->
		<fmpp sourceroot="${tmpl}/text" outputroot="${temp}/misc" dataroot="${basedir}" expert="true">
			<data expandproperties="true">
				values: dataLoader.ForgeLoader("project.xml", "../modules", "../libraries")
				project: get(values, "project")
				editions: get(values, "editions")
				ant: antProperties()
			</data>
			<include name="editionsMatrix.txt" />
		</fmpp>
		<!-- Generate modules/type file -->
		<fmpp sourceroot="${tmpl}/text" outputroot="${temp}/misc" dataroot="${basedir}" expert="true">
			<data expandproperties="true">
				values: dataLoader.ForgeLoader("project.xml", "../modules", "../libraries")
				project: get(values, "project")
				editions: get(values, "editions")
			</data>
			<include name="mcs.properties" />
		</fmpp>
		<!-- prepare the common time stamp for the maven distribution -->
		<!-- Revision number -->
		<mkdir dir="${temp}" />
		<!-- Snapshot? -->
		<condition property="is.snapshot" else="false">
			<contains string="${version-maven}" substring="-SNAPSHOT" />
		</condition>
		<echo message="maven-timestamp:${maven-snapshot-timestamp}${line.separator}" file="${temp}/snapshot.properties" append="false" />
		<echo message="svn-revision:" file="${temp}/snapshot.properties" append="true" />
		<exec executable="git" output="${temp}/snapshot.properties" append="true">
			<arg line="rev-list --max-count=1 HEAD" />
		</exec>
		<echo message="${line.separator}" file="${temp}/snapshot.properties" append="true" />
	</target>

	<!-- CLEAN target -->
	<target name="clean" depends="clean-temp, clean-dist" description="Clean the staging area." />

	<!-- CLEAN-FULL target -->
	<target name="clean-full" depends="clean-editions, clean-temp, clean-dist" description="Clean the working area" />

	<!-- CLEAN-EDITIONS target -->
	<target name="clean-editions" description="Clean the editions root directory">
		<delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
			<fileset dir="${editions-dir}" includes="*/**" excludes="readme.txt" />
		</delete>
	</target>

	<!-- CLEAN-DIST target -->
	<target name="clean-dist" description="Clean distributions files.">
		<delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
			<fileset dir="${dist}" />
		</delete>
	</target>

	<!-- CLEAN-TEMP target -->
	<target name="clean-temp" description="Clean temporary build files.">
		<delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
			<fileset dir="${temp}" />
		</delete>
	</target>

	<target name="build" description="Build the editions without generating the source code.">
		<for param="edition" delimiter="," list="${editions}" trim="true">
			<sequential>
				<echo message="Build the edition @{edition}" />
				<exec-edition edition="@{edition}" target="build" />
			</sequential>
		</for>
	</target>

	<target name="rebuild" depends="clean-full, generate, build" description="Clean the temp files, regenerate the source code and build the editions." />

	<target name="generate" depends="generate-misc" description="Regenerate the source code.">
		<for param="edition" delimiter="," list="${editions}" trim="true">
			<sequential>
				<echo message="Generate the source code of the edition @{edition}" />
				<generate-edition edition="@{edition}" />
			</sequential>
		</for>
	</target>

	<target name="generate-javadocs" description="Regenerate the javadocs of the editions.">
		<for param="edition" delimiter="," list="${editions}" trim="true">
			<sequential>
				<echo message="Generate javadocs of the edition @{edition}" />
				<exec-edition edition="@{edition}" target="generate-javadocs" />
			</sequential>
		</for>
	</target>

	<target name="regenerate" depends="clean-editions, generate" description="Clean and regenerate the source code." />

	<target name="verify" description="Verify editions.">
		<for param="edition" delimiter="," list="${editions}" trim="true">
			<sequential>
				<exec-edition edition="@{edition}" target="verify" />
			</sequential>
		</for>
	</target>

	<target name="verify-checkstyle" description="Verify editions.">
		<for param="edition" delimiter="," list="${editions}" trim="true">
			<sequential>
				<exec-edition edition="@{edition}" target="verify-checkstyle" />
			</sequential>
		</for>
	</target>

	<target name="verify-findbugs" description="Verify editions.">
		<for param="edition" delimiter="," list="${editions}" trim="true">
			<sequential>
				<exec-edition edition="@{edition}" target="verify-findbugs" />
			</sequential>
		</for>
	</target>

	<target name="verify-tests" description="Verify editions.">
		<for param="edition" delimiter="," list="${editions}" trim="true">
			<sequential>
				<exec-edition edition="@{edition}" target="verify-tests" />
			</sequential>
		</for>
	</target>

</project>
