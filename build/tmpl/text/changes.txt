   
===========
Changes log  
===========

- @version-full@ (@release-date@)
    - API changes
      -  Added Request#loggable property, LogService#isLoggable(Request)
         method and LogService#loggableTemplate to enable selective request 
         logging. Suggested by John Logdson.
    - Enhancements
      - Simplified the default console logging by replacing Java's default
        verbose log formatter by a single line formatter. This formatter
        can be modified via the static Engine#logFormatter property.
      - Added easy programmatic control of log configuration via 
        Engine#logLevel and restletLogLevel static properties.
        If regular log configuration is used via system properties, it 
        is taking over for backward compatibility.
      - In addition to java.util.logging.SimpleFormatter, two new ones are
        added: org.restlet.engine.log.SimplerFormatter and the new default
        org.restlet.engine.log.SimplestFormatter.
      - Removed TraceHandler class, replaced by configurable ConsoleHander
        formatters.
      - Improved the precision of log messages, for example giving the list
        of template variables matched and their value. 
        Suggested by John Logdson.
      - Optimized routing when 0 characters are matched on an URI template.
    - Bugs fixed
      - 
    - Misc
      -

- 2.1 Milestone 1 (11/07/2010)
    - API changes
      - Removed deprecated classes and code.
      - The Route class has been reintroduced with a lighter
        behavior not depending on URI templates.
      - Added an UniformResource#setApplication() setter to be able
        to explicitly set the parent application used to pick up the
        ConverterService or MetadataService. This property is also 
        carried on by the copy constructor. Suggested by John Logdson.
      - Added UniformResource#toString() for easier debugging.
      - Added Representation#isSelectable() and getRegistration() method
        to manipulate the registration of the NIO channel with its 
        associated selector and received asynchronous notifications
        of available content.
      - Deprecated Application#setClientRoot, renamed into a 
        setOutboundRoot method.
    - Enhancements
      - Improved the naming of files created by the FILE local 
        connector so that media type extension comes at the end.
      - Added a fully new non-blocking NIO/HTTP connector in the engine, 
        in replacement of the previous one based on blocking BIO. 
        It has much better performance (latency, throughput and 
        scalability) and supports persistent connections and chunked
        encoding.
    - Misc
      - Removed the Grizzly and Netty extensions which were still 
        considered experimental at this point. The new internal
        connector based on non-blocking NIO now provides similar
        advantages and is already more complete from a HTTP coverage
        point of view. Users of these connectors are encouraged to
        leverage the NIO internal connector or the two other extensions
        that are still available in 2.1 (Jetty and Simple connectors).
      - Added library GWT 2.1.0, removed support of GWT 2.0.