/**
 * Copyright 2005-2010 Noelios Technologies.
 * 
 * The contents of this file are subject to the terms of one of the following
 * open source licenses: LGPL 3.0 or LGPL 2.1 or CDDL 1.0 or EPL 1.0 (the
 * "Licenses"). You can select the license that you prefer but you may not use
 * this file except in compliance with one of these Licenses.
 * 
 * You can obtain a copy of the LGPL 3.0 license at
 * http://www.opensource.org/licenses/lgpl-3.0.html
 * 
 * You can obtain a copy of the LGPL 2.1 license at
 * http://www.opensource.org/licenses/lgpl-2.1.php
 * 
 * You can obtain a copy of the CDDL 1.0 license at
 * http://www.opensource.org/licenses/cddl1.php
 * 
 * You can obtain a copy of the EPL 1.0 license at
 * http://www.opensource.org/licenses/eclipse-1.0.php
 * 
 * See the Licenses for the specific language governing permissions and
 * limitations under the Licenses.
 * 
 * Alternatively, you can obtain a royalty free commercial license with less
 * limitations, transferable or non-transferable, directly at
 * http://www.noelios.com/products/restlet-engine
 * 
 * Restlet is a registered trademark of Noelios Technologies.
 */

import org.restlet.ext.dataservices.Query;
import org.restlet.ext.dataservices.Session;

<#list schema.types?sort as type>
import ${type.fullClassName};
</#list>

<#compress>
/**
 * Generated by the generator tool for the WCF Data Services extension for the Restlet framework.<br>
 * 
<#if metadata.metadataRef??> * @see <a href="${metadata.metadataRef}">Metadata of the target WCF Data Services</a></#if>
 * 
 */
</#compress>

public class ${className} extends Session {

    /**
     * Constructor.
     * 
     */
    public ${className}() {
        super("${dataServiceUri}");
    }

<#list schema.types as type>
    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(${type.className} entity) throws Exception {
    <#list entityContainers as container>
        <#list container.entities as entity>
            <#if entity.type??>
                <#if (entity.type.name!"") == type.name>
        addEntity("/${entity.name}", entity);
                </#if>
            </#if>
        </#list>
    </#list>
    }

</#list>
<#list schema.types as type>
    /**
     * Creates a query for ${type.normalizedName} entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<${type.className}> create${type.className}Query(String subpath) {
    <#list entityContainers as container>
        <#list container.entities as entity>
            <#if entity.type??>
                <#if (entity.type.name!"") == type.name>
        return createQuery(subpath, ${type.className}.class);
                </#if>
            </#if>
        </#list>
    </#list>
    }

</#list>
}