<%groovy

// Utilities to access script.statics

// These functions allow for safe, scalable access in heavily concurrent
// applications, by following the semantics of reentrant read-write locks.

getStatic = { name, getDefaultValue ->
	def value
	script.staticsLock.readLock().lock()
	try {
		value = script.statics.get(name)
		if(value == null) {
			script.staticsLock.readLock().unlock()

			// We're not holding any lock!
			// Statics may change here!

			script.staticsLock.writeLock().lock()
			try {
				// We must test again, because statics may have changed
				value = script.statics.get(name)
				if(value == null) {
					value = getDefaultValue()
					script.statics.put(name, value)
				}
			}
			finally {
				script.staticsLock.readLock().lock()
				script.staticsLock.writeLock().unlock()
			}
		}
	}
	finally {
		script.staticsLock.readLock().unlock()
	}
	return value
}

setStatic = { name, value ->
	script.staticsLock.writeLock().lock()
	try {
		script.statics.put(name, value)
	}
	finally {
		script.staticsLock.writeLock().unlock()
	}
}

%>