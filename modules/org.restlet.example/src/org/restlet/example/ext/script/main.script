<%rhino-nonjdk

//
// This script starts a Restlet component with an HTTP server. The attached application supports scripted
// resources and a directory containing both static files and dynamic scripts. It is intended to be run via
// com.threecrickets.util.script.ScriptedMain, which can be set as the main class in your wrapper.conf.
//
// See conf/restlet.conf for more information, and edit it to configure your setup. You may also edit
// this file to control your Restlet component and application. 
//

// Important! The version of Rhino included with the JDK has an overly simplified version of JavaAdapter,
// so that it's impossible to extend classes. To boot-strap our Restlet application, we need to extend it,
// and so we absolutely must use the non-JDK version of Rhino. Annoyingly, there's no simple way to disable
// the built-in version of Rhino, and so Mozilla had to add the "rhino-nonjdk" engine name as a workaround.
// We'll go ahead and set that as our default engine name.

container.defaultScriptEngineName = 'rhino-nonjdk';

%><%& 'conf/restlet.conf' %><%

importClass(
	java.io.File,
	org.restlet.Application,
	org.restlet.Component,
	org.restlet.resource.Directory,
	org.restlet.routing.Router,
	org.restlet.routing.Redirector,
	org.restlet.data.Protocol,
	org.restlet.data.Reference,
	org.restlet.util.Template,
	org.restlet.ext.script.ScriptedResource,
	org.restlet.ext.script.ScriptedTextResource,
	com.threecrickets.scripturian.file.ScriptFileSource);

//
// Logging
//

java.util.logging.LogManager.logManager.reset();
try {
org.slf4j.bridge.SLF4JBridgeHandler.install();
} catch(x) {}

try {
org.apache.log4j.PropertyConfigurator.configure('conf/log4j.conf');
} catch(x) {}

//
// Component and Server
//

var component = new Component();
component.servers.add(Protocol.HTTP, serverPort);
component.clients.add(Protocol.FILE);
component.logService.loggerName = componentWebLoggerName;

//
// Application
//

// Note: this use of JavaAdapter does not work with the version of Rhino shipped with the JDK!

var application = new JavaAdapter(Application, {

	createRoot: function() {
		var context = this.context;
		var classLoader = this.getClass().classLoader;

		var directory = new Directory(context, new File(staticWebBasePath).toURI());
		directory.listingAllowed = staticWebDirectoryListingAllowed;

		var router = new Router();
		router.attach(resourceBaseURL, classLoader.loadClass('org.restlet.ext.script.ScriptedResource'));
		router.attach(scriptedWebBaseURL, classLoader.loadClass('org.restlet.ext.script.ScriptedTextResource'));
		router.attach(staticWebBaseURL, directory);

		// Redirect to trailing slashes
		for(var i in urlAddTrailingSlash) {
			var url = urlAddTrailingSlash[i];
			router.attach(url, new Redirector(context, url + '/', Redirector.MODE_CLIENT_PERMANENT)).matchingMode = Template.MODE_EQUALS;
		}
		
		return router;
	}
});

application.name = applicationName;
application.description = applicationDescription;
application.author = applicationAuthor;
application.owner = applicationOwner;
application.statusService.homeRef = new Reference(applicationHomeURL);
application.statusService.contactEmail = applicationContactEmail;

// The context will not be created until we attach the application
component.defaultHost.attach(application);

application.context.logger = applicationLoggerName;

//
// Context
//

var attributes = application.context.attributes;

// ScriptedResource

attributes.put('org.restlet.ext.script.ScriptedResource.defaultScriptEngineName', container.defaultScriptEngineName);
attributes.put('org.restlet.ext.script.ScriptedResource.extension', resourceExtension);
attributes.put('org.restlet.ext.script.ScriptedResource.defaultName', resourceDefaultName);
attributes.put('org.restlet.ext.script.ScriptedResource.scriptSource',
	new ScriptFileSource(new File(resourceBasePath), resourceDefaultName, resourceExtension, resourceMinimumTimeBetweenValidityChecks));
attributes.put('org.restlet.ext.script.ScriptedResource.sourceViewable', resourceSourceViewable);

// ScriptedTextResource

attributes.put('org.restlet.ext.script.ScriptedTextResource.defaultScriptEngineName', container.defaultScriptEngineName);
attributes.put('org.restlet.ext.script.ScriptedTextResource.defaultName', scriptedWebDefaultScript);
attributes.put('org.restlet.ext.script.ScriptedTextResource.scriptSource',
	 new ScriptFileSource(new File(scriptedWebBasePath), scriptedWebDefaultScript, null, scriptedWebMinimumTimeBetweenValidityChecks));
attributes.put('org.restlet.ext.script.ScriptedTextResource.sourceViewable', scriptedWebSourceViewable);

//
// Start
//

component.start();

%>main.script finished
