
<html>
<head>
	<title>Embedded Python (Jython) Demo</title>
</head>
<body>
<%python

#
# Accessing the request
#

form = container.getRequest().resourceRef.queryAsForm

#
# Stream this script
#

if form.getFirstValue('stream') == 'true':
	if container.stream():
		raise

script.setCacheDuration(5000)

#
# Calling Java
#

from java.lang import *
sys.stdout.write('<h3>Timestamp:</h3> ' + str(System.currentTimeMillis()))

# (Note: Python's print statement can be used here, too, but it may not be the best choice
# for outputting HTML due to its "softspace" feature. It is meant more for debugging than
# for clean output. Also, it is no longer supported in Python 3. We'll prefer sys.stdout
# in this example.)

#
# Including a script
#
# This is identical to:
#
#   container.include('path')
#

%>
<%& script.statics['exampleBasePath'] + 'demos/jython.fragment' %>
<%

#
# An example of a method
#

def print_factory(factory):
	%><p>
	Engine: <%= factory.engineName %> version <%= factory.engineVersion %><br />
	Language: <%= factory.languageName %> version <%= factory.languageVersion %><br />
	Names: <%
	names = factory.names.toArray()
	for i in range(len(names)):
		sys.stdout.write(names[i])
		if i < len(names) - 1:
			sys.stdout.write(', ')
	%></p><%

%>
<h3>Current script engine:</h3>
<%
print_factory(script.scriptEngine.factory)
%>
<h3>Available script engines:</h3>
<%
factories = container.scriptEngineManager.engineFactories.toArray()
for factory in factories:
	print_factory(factory)
%>
<h3>The "id" attribute is:</h3>
<p><%= form.getFirstValue('id') %></p>
<h3>A few tests:</h3>
<%
for i in range(10):
	%>A multiple of three: <%
	print_triple(i)
	%><br /><%

%>
</body>
<html>