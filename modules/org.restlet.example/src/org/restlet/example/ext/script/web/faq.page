<% script.cacheDuration = 5000; var exampleBasePath = script.meta.get('exampleBasePath'); %><%& exampleBasePath + 'header.fragment' %>

<h2>Frequently Asked Questions</h2>

<h3>Why does Scripturian provide its own "include" facility, and why would I prefer it over that provided by the scripting language?</h3>
<p>
You are absolutely free to use the scripting language's facilities, which in some cases could be very powerful.
Scripturian's facility offers you two advantages:
</p>
<p>
First, in that your container environment can work with specialized <a href="http://www.threecrickets.com/scripturian/static/javadoc/index.html?com/threecrickets/scripturian/ScriptSource.html">ScriptSource</a> implementations.
For example, you might
want to implement a ScriptSource that reads all its scripts from a zip file. This would be great if you're using
Scipturian for enabling plugins to your application, in which case a plugin could be provided via a single zip file.
Internally, you may wants scripts to include each other. Using Scripturian's include facility, you can guarantee
that scripts can include each other no matter how the scripts are actually stored.
</p>
<p>
Second, because Scripturian allows you to mix scripting languages, it would be possible to include scripts in any language.
As to why you might want to do this, see the question below.
</p>

<h3>Why does Scripturian support mixing different languages in the same script?</h3>
<p>
Scripting languages differ widely in performance, capabilities, and security considerations. For example, let's say you
are using a very scalable and flexible templating language, but it does not support higher-level programming, which you need.
On the other, a higher-level language would do a poor job at the kind of templating work you need.
With Scripturian, you are able to have one section in the templating language, and others in, say, Ruby. Scripturian lets
you cleanly get the benefits of both in the same file.
</p>

<h3>What is the "in-flow" tag used for?</h3>
<p>
This tag is only useful in scripts including multiple languages, in which case it lets you insert one language "into the flow"
of the other. Consider this example:
</p>
<pre>
&lt;%js if(isDebug) { %&gt;
The debug information is: &lt;%:python dumpDebugInfo(); %&gt;
&lt;% } %&gt;
</pre>
<p>
We are using JavaScript to do our main coding. However, we would like to use a facility in Python to dump our actual debug
information. Without using the in-flow tag for the Python section, we would be getting a JavaScript syntax error. Why?
Because Scripturian separates segments according to scripting languages. Without the in-flow tag, it would attempt to run the first
JavaScript segment, then the Python segment, and finally the last JavaScript segment. However, both JavaScript segments in this
case are incomplete and un-runnable. The in-flow tag solves this by keeping us in the flow of JavaScript, so that we are
dealing with a single JavaScript segment.
</p>
<p>
How is this possible? Behind the scenes, Scripturian uses its include facility to handle in-flow tags. In this case the Python
section is extracted into an in-memory script file. The above would then be equivalent to:
<pre>
&lt;%js if(isDebug) { %&gt;
The debug information is: &lt;%& 'dump.fragment' %&gt;
&lt;% } %&gt;
</pre>
<p>Where the 'dump.fragment' file is:</p>
<pre>
&lt;%python dumpDebugInfo(); %&gt;
</pre>
<p>
The in-flow tag saves you from creating separate files for such uses. Note that the entire separation process occurs only during
parsing, and is generally very fast. All script segments will be compiled for maximum performance if you request it.
</p>

<%& exampleBasePath + 'footer.fragment' %>