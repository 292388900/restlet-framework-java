<% script.cacheDuration = 5000; var exampleBasePath = script.staticScope.get('exampleBasePath'); %><%& exampleBasePath + 'header.fragment' %>

<h2>Performance Notes</h2>

<h3>Restlet Script Extension</h3>
<p>
The <a href="restlet.page">script extension</a> supports two modes for generating text, with different performance characteristics:
</p><p>
<i>Caching mode:</i> First, the entire script is run, with its output sent into a buffer. This buffer is then cached, and <i>only then</i> sent to the client. This is the default mode and
recommended for most scripts. Scripts can control the duration of their individual cache.  
</p><p>
<i>Streaming mode:</i> Output is sent to the client <i>while</i> the script runs. This is recommended for scripts that need to output a very large amount of text, which might take a long time,
or that might otherwise encounter slow-downs while running. In either case, you want the client to receive ongoing output. The output of the script is not cached.
</p><p>
Scripts can switch between modes according to changing circumstances. For example, to increase caching duration during heavy loads, to decrease it during periods where data changes often,
or to stream in the case of an expected large output.
</p>

<h3>Script Engine Performance</h3>
<p>
Note that there may be a delay when running each test for the first time, as each scripting engine loads and initializes itself.
Once they're up and running, though, they tend to run very fast and, depending on many other design factors, can support very scalable
web applications. For example, check out the sources for the <a href="demos-rest.page">REST demos</a> to see how to synchronize
data between threads using a read-write lock protocol.
</p><p>
Exact performance characteristics depend on the engine. The <a href="http://shootout.alioth.debian.org/">Bechmarks Game</a> can
give you some comparisons of different engines running high-computation programs.
</p><p>
In any case, if you have a piece of intensive code that really needs
to perform well, it's probably best to write it in Java and access it from the script. You can even write it in C or assembly, and have it linked to
Java via JNI.
</p>

<%& exampleBasePath + 'footer.fragment' %>