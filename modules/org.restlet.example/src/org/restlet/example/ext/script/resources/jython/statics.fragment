<%python

# Utilities to access script.statics

# These functions allow for safe, scalable access in heavily concurrent
# applications, by following the semantics of reentrant read-write locks.

def getStatic(name, getDefaultValue):
	global script

	value = None
	script.staticsLock.readLock().lock()
	try:
		value = script.statics.get(name)
		if value == None:
			script.staticsLock.readLock().unlock()

			# We're not holding any lock!
			# Statics may change here!

			script.staticsLock.writeLock().lock()
			try:
				# We must test again, because statics may have changed
				value = script.statics.get(name)
				if value == None:
					value = getDefaultValue()
					script.statics.put(name, value)
			finally:
				script.staticsLock.readLock().lock()
				script.staticsLock.writeLock().unlock()
	finally:
		script.staticsLock.readLock().unlock()

	return value

def setStatic(name, value):
	global script

	script.staticsLock.writeLock().lock()
	try:
		script.statics.put(name, value)
	finally:
		script.staticsLock.writeLock().unlock()

%>